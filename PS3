{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cc49b73b",
   "metadata": {},
   "source": [
    "#Question1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d4880a18",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   user_id  age gender  occupation zip_code\n",
      "0        1   24      M  technician    85711\n",
      "1        2   53      F       other    94043\n",
      "2        3   23      M      writer    32067\n",
      "3        4   24      M  technician    43537\n",
      "4        5   33      F       other    15213\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# URL of the dataset\n",
    "url = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n",
    "\n",
    "# Read the dataset using pandas and assign it to the variable 'users'\n",
    "users = pd.read_csv(url, sep='|')\n",
    "\n",
    "# Display the first few rows of the 'users' DataFrame to verify the import\n",
    "print(users.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e8ef6879",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "occupation\n",
      "administrator    38.746835\n",
      "artist           31.392857\n",
      "doctor           43.571429\n",
      "educator         42.010526\n",
      "engineer         36.388060\n",
      "entertainment    29.222222\n",
      "executive        38.718750\n",
      "healthcare       41.562500\n",
      "homemaker        32.571429\n",
      "lawyer           36.750000\n",
      "librarian        40.000000\n",
      "marketing        37.615385\n",
      "none             26.555556\n",
      "other            34.523810\n",
      "programmer       33.121212\n",
      "retired          63.071429\n",
      "salesman         35.666667\n",
      "scientist        35.548387\n",
      "student          22.081633\n",
      "technician       33.148148\n",
      "writer           36.311111\n",
      "Name: age, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Grouping the data by occupation and calculating the mean age for each occupation\n",
    "mean_age_per_occupation = users.groupby('occupation')['age'].mean()\n",
    "\n",
    "# Displaying the mean age per occupation\n",
    "print(mean_age_per_occupation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bc937280",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               min  max\n",
      "occupation             \n",
      "administrator   21   70\n",
      "artist          19   48\n",
      "doctor          28   64\n",
      "educator        23   63\n",
      "engineer        22   70\n",
      "entertainment   15   50\n",
      "executive       22   69\n",
      "healthcare      22   62\n",
      "homemaker       20   50\n",
      "lawyer          21   53\n",
      "librarian       23   69\n",
      "marketing       24   55\n",
      "none            11   55\n",
      "other           13   64\n",
      "programmer      20   63\n",
      "retired         51   73\n",
      "salesman        18   66\n",
      "scientist       23   55\n",
      "student          7   42\n",
      "technician      21   55\n",
      "writer          18   60\n"
     ]
    }
   ],
   "source": [
    "# Grouping the data by occupation and calculating minimum and maximum ages for each occupation\n",
    "min_max_age_per_occupation = users.groupby('occupation')['age'].agg(['min', 'max'])\n",
    "\n",
    "# Displaying the minimum and maximum ages per occupation\n",
    "print(min_max_age_per_occupation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ee128ef2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "occupation     gender\n",
      "administrator  F         40.638889\n",
      "               M         37.162791\n",
      "artist         F         30.307692\n",
      "               M         32.333333\n",
      "doctor         M         43.571429\n",
      "educator       F         39.115385\n",
      "               M         43.101449\n",
      "engineer       F         29.500000\n",
      "               M         36.600000\n",
      "entertainment  F         31.000000\n",
      "               M         29.000000\n",
      "executive      F         44.000000\n",
      "               M         38.172414\n",
      "healthcare     F         39.818182\n",
      "               M         45.400000\n",
      "homemaker      F         34.166667\n",
      "               M         23.000000\n",
      "lawyer         F         39.500000\n",
      "               M         36.200000\n",
      "librarian      F         40.000000\n",
      "               M         40.000000\n",
      "marketing      F         37.200000\n",
      "               M         37.875000\n",
      "none           F         36.500000\n",
      "               M         18.600000\n",
      "other          F         35.472222\n",
      "               M         34.028986\n",
      "programmer     F         32.166667\n",
      "               M         33.216667\n",
      "retired        F         70.000000\n",
      "               M         62.538462\n",
      "salesman       F         27.000000\n",
      "               M         38.555556\n",
      "scientist      F         28.333333\n",
      "               M         36.321429\n",
      "student        F         20.750000\n",
      "               M         22.669118\n",
      "technician     F         38.000000\n",
      "               M         32.961538\n",
      "writer         F         37.631579\n",
      "               M         35.346154\n",
      "Name: age, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Grouping the data by occupation and sex, then calculating the mean age for each group\n",
    "mean_age_per_occupation_sex = users.groupby(['occupation', 'gender'])['age'].mean()\n",
    "\n",
    "# Displaying the mean age for each combination of occupation and sex\n",
    "print(mean_age_per_occupation_sex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3893d106",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gender                 F           M\n",
      "occupation                          \n",
      "administrator  45.569620   54.430380\n",
      "artist         46.428571   53.571429\n",
      "doctor          0.000000  100.000000\n",
      "educator       27.368421   72.631579\n",
      "engineer        2.985075   97.014925\n",
      "entertainment  11.111111   88.888889\n",
      "executive       9.375000   90.625000\n",
      "healthcare     68.750000   31.250000\n",
      "homemaker      85.714286   14.285714\n",
      "lawyer         16.666667   83.333333\n",
      "librarian      56.862745   43.137255\n",
      "marketing      38.461538   61.538462\n",
      "none           44.444444   55.555556\n",
      "other          34.285714   65.714286\n",
      "programmer      9.090909   90.909091\n",
      "retired         7.142857   92.857143\n",
      "salesman       25.000000   75.000000\n",
      "scientist       9.677419   90.322581\n",
      "student        30.612245   69.387755\n",
      "technician      3.703704   96.296296\n",
      "writer         42.222222   57.777778\n"
     ]
    }
   ],
   "source": [
    "# Grouping the data by occupation and gender to count the number of occurrences\n",
    "occupation_gender_counts = users.groupby(['occupation', 'gender']).size().unstack(fill_value=0)\n",
    "\n",
    "# Calculate the total count (sum of men and women) for each occupation\n",
    "occupation_total = occupation_gender_counts.sum(axis=1)\n",
    "\n",
    "# Calculate the percentage of men and women for each occupation\n",
    "occupation_gender_percentage = occupation_gender_counts.divide(occupation_total, axis=0) * 100\n",
    "\n",
    "# Displaying the percentage of women and men for each occupation\n",
    "print(occupation_gender_percentage)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f04888b7",
   "metadata": {},
   "source": [
    "#Question2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1d0591d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n",
      "0         Croatia      4               13                12             51.9%   \n",
      "1  Czech Republic      4               13                18             41.9%   \n",
      "2         Denmark      4               10                10             50.0%   \n",
      "3         England      5               11                18             50.0%   \n",
      "4          France      3               22                24             37.9%   \n",
      "\n",
      "  % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n",
      "0            16.0%                          32             0              0   \n",
      "1            12.9%                          39             0              0   \n",
      "2            20.0%                          27             1              0   \n",
      "3            17.2%                          40             0              0   \n",
      "4             6.5%                          65             1              0   \n",
      "\n",
      "   Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n",
      "0                     0  ...          13                 81.3%         41   \n",
      "1                     0  ...           9                 60.1%         53   \n",
      "2                     0  ...          10                 66.7%         25   \n",
      "3                     0  ...          22                 88.1%         43   \n",
      "4                     0  ...           6                 54.6%         36   \n",
      "\n",
      "  Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n",
      "0             62         2             9          0        9         9   \n",
      "1             73         8             7          0       11        11   \n",
      "2             38         8             4          0        7         7   \n",
      "3             45         6             5          0       11        11   \n",
      "4             51         5             6          0       11        11   \n",
      "\n",
      "   Players Used  \n",
      "0            16  \n",
      "1            19  \n",
      "2            15  \n",
      "3            16  \n",
      "4            19  \n",
      "\n",
      "[5 rows x 35 columns]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# URL of the dataset\n",
    "url = 'https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/02_Filtering_%26_Sorting/Euro12/Euro_2012_stats_TEAM.csv'\n",
    "\n",
    "# Read the dataset using pandas and assign it to the variable 'euro12'\n",
    "euro12 = pd.read_csv(url)\n",
    "\n",
    "# Display the first few rows of the 'euro12' DataFrame to verify the import\n",
    "print(euro12.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bfb859db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      4\n",
      "1      4\n",
      "2      4\n",
      "3      5\n",
      "4      3\n",
      "5     10\n",
      "6      5\n",
      "7      6\n",
      "8      2\n",
      "9      2\n",
      "10     6\n",
      "11     1\n",
      "12     5\n",
      "13    12\n",
      "14     5\n",
      "15     2\n",
      "Name: Goals, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Selecting only the 'Goal' column using dot notation\n",
    "goal_column = euro12.Goals\n",
    "\n",
    "# Displaying the 'Goal' column\n",
    "print(goal_column)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "55333f63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of teams that participated in Euro 2012: 16\n"
     ]
    }
   ],
   "source": [
    "# Counting the number of unique teams in the 'Team' column\n",
    "num_teams = euro12['Team'].nunique()\n",
    "\n",
    "# Displaying the number of teams that participated in Euro 2012\n",
    "print(\"Number of teams that participated in Euro 2012:\", num_teams)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f2541679",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of columns in the dataset: 35\n"
     ]
    }
   ],
   "source": [
    "# Get the number of columns in the 'euro12' DataFrame\n",
    "num_columns = euro12.shape[1]\n",
    "\n",
    "# Display the number of columns in the 'euro12' DataFrame\n",
    "print(\"Number of columns in the dataset:\", num_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0de48dee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   Team  Yellow Cards  Red Cards\n",
      "0               Croatia             9          0\n",
      "1        Czech Republic             7          0\n",
      "2               Denmark             4          0\n",
      "3               England             5          0\n",
      "4                France             6          0\n",
      "5               Germany             4          0\n",
      "6                Greece             9          1\n",
      "7                 Italy            16          0\n",
      "8           Netherlands             5          0\n",
      "9                Poland             7          1\n",
      "10             Portugal            12          0\n",
      "11  Republic of Ireland             6          1\n",
      "12               Russia             6          0\n",
      "13                Spain            11          0\n",
      "14               Sweden             7          0\n",
      "15              Ukraine             5          0\n"
     ]
    }
   ],
   "source": [
    "# Creating the 'discipline' DataFrame with specific columns\n",
    "discipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]\n",
    "\n",
    "# Displaying the 'discipline' DataFrame\n",
    "print(discipline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "712e6cc5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   Team  Red Cards  Yellow Cards\n",
      "2               Denmark          0             4\n",
      "5               Germany          0             4\n",
      "3               England          0             5\n",
      "8           Netherlands          0             5\n",
      "15              Ukraine          0             5\n",
      "4                France          0             6\n",
      "12               Russia          0             6\n",
      "1        Czech Republic          0             7\n",
      "14               Sweden          0             7\n",
      "0               Croatia          0             9\n",
      "13                Spain          0            11\n",
      "10             Portugal          0            12\n",
      "7                 Italy          0            16\n",
      "11  Republic of Ireland          1             6\n",
      "9                Poland          1             7\n",
      "6                Greece          1             9\n"
     ]
    }
   ],
   "source": [
    "# Sorting the teams by 'Red Cards' and then 'Yellow Cards' in ascending order\n",
    "sorted_teams = euro12.sort_values(by=['Red Cards', 'Yellow Cards'])\n",
    "\n",
    "# Displaying the sorted DataFrame\n",
    "print(sorted_teams[['Team', 'Red Cards', 'Yellow Cards']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bb1710eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Team\n",
      "Croatia                 9.0\n",
      "Czech Republic          7.0\n",
      "Denmark                 4.0\n",
      "England                 5.0\n",
      "France                  6.0\n",
      "Germany                 4.0\n",
      "Greece                  9.0\n",
      "Italy                  16.0\n",
      "Netherlands             5.0\n",
      "Poland                  7.0\n",
      "Portugal               12.0\n",
      "Republic of Ireland     6.0\n",
      "Russia                  6.0\n",
      "Spain                  11.0\n",
      "Sweden                  7.0\n",
      "Ukraine                 5.0\n",
      "Name: Yellow Cards, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calculating the mean yellow cards given per team\n",
    "mean_yellow_cards_per_team = euro12.groupby('Team')['Yellow Cards'].mean()\n",
    "\n",
    "# Displaying the mean yellow cards per team\n",
    "print(mean_yellow_cards_per_team)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7806640e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Team  Goals\n",
      "5  Germany     10\n"
     ]
    }
   ],
   "source": [
    "# Filter teams that scored more than 6 goals\n",
    "more_than_6_goals = euro12[euro12['Goals'] > 6]\n",
    "\n",
    "# Select teams that start with the letter 'G'\n",
    "teams_starting_with_G = more_than_6_goals[more_than_6_goals['Team'].str.startswith('G')]\n",
    "\n",
    "# Displaying the selected teams\n",
    "print(teams_starting_with_G[['Team', 'Goals']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fbf90334",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   Team  Goals  Shots on target  Shots off target  \\\n",
      "0               Croatia      4               13                12   \n",
      "1        Czech Republic      4               13                18   \n",
      "2               Denmark      4               10                10   \n",
      "3               England      5               11                18   \n",
      "4                France      3               22                24   \n",
      "5               Germany     10               32                32   \n",
      "6                Greece      5                8                18   \n",
      "7                 Italy      6               34                45   \n",
      "8           Netherlands      2               12                36   \n",
      "9                Poland      2               15                23   \n",
      "10             Portugal      6               22                42   \n",
      "11  Republic of Ireland      1                7                12   \n",
      "12               Russia      5                9                31   \n",
      "13                Spain     12               42                33   \n",
      "14               Sweden      5               17                19   \n",
      "15              Ukraine      2                7                26   \n",
      "\n",
      "   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \n",
      "0              51.9%            16.0%                          32  \n",
      "1              41.9%            12.9%                          39  \n",
      "2              50.0%            20.0%                          27  \n",
      "3              50.0%            17.2%                          40  \n",
      "4              37.9%             6.5%                          65  \n",
      "5              47.8%            15.6%                          80  \n",
      "6              30.7%            19.2%                          32  \n",
      "7              43.0%             7.5%                         110  \n",
      "8              25.0%             4.1%                          60  \n",
      "9              39.4%             5.2%                          48  \n",
      "10             34.3%             9.3%                          82  \n",
      "11             36.8%             5.2%                          28  \n",
      "12             22.5%            12.5%                          59  \n",
      "13             55.9%            16.0%                         100  \n",
      "14             47.2%            13.8%                          39  \n",
      "15             21.2%             6.0%                          38  \n"
     ]
    }
   ],
   "source": [
    "# Selecting the first 7 columns\n",
    "first_7_columns = euro12.iloc[:, :7]\n",
    "\n",
    "# Displaying the selected columns\n",
    "print(first_7_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d75ca01b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   Team  Goals  Shots on target  Shots off target  \\\n",
      "0               Croatia      4               13                12   \n",
      "1        Czech Republic      4               13                18   \n",
      "2               Denmark      4               10                10   \n",
      "3               England      5               11                18   \n",
      "4                France      3               22                24   \n",
      "5               Germany     10               32                32   \n",
      "6                Greece      5                8                18   \n",
      "7                 Italy      6               34                45   \n",
      "8           Netherlands      2               12                36   \n",
      "9                Poland      2               15                23   \n",
      "10             Portugal      6               22                42   \n",
      "11  Republic of Ireland      1                7                12   \n",
      "12               Russia      5                9                31   \n",
      "13                Spain     12               42                33   \n",
      "14               Sweden      5               17                19   \n",
      "15              Ukraine      2                7                26   \n",
      "\n",
      "   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n",
      "0              51.9%            16.0%                          32   \n",
      "1              41.9%            12.9%                          39   \n",
      "2              50.0%            20.0%                          27   \n",
      "3              50.0%            17.2%                          40   \n",
      "4              37.9%             6.5%                          65   \n",
      "5              47.8%            15.6%                          80   \n",
      "6              30.7%            19.2%                          32   \n",
      "7              43.0%             7.5%                         110   \n",
      "8              25.0%             4.1%                          60   \n",
      "9              39.4%             5.2%                          48   \n",
      "10             34.3%             9.3%                          82   \n",
      "11             36.8%             5.2%                          28   \n",
      "12             22.5%            12.5%                          59   \n",
      "13             55.9%            16.0%                         100   \n",
      "14             47.2%            13.8%                          39   \n",
      "15             21.2%             6.0%                          38   \n",
      "\n",
      "    Hit Woodwork  Penalty goals  Penalties not scored  ...  Clean Sheets  \\\n",
      "0              0              0                     0  ...             0   \n",
      "1              0              0                     0  ...             1   \n",
      "2              1              0                     0  ...             1   \n",
      "3              0              0                     0  ...             2   \n",
      "4              1              0                     0  ...             1   \n",
      "5              2              1                     0  ...             1   \n",
      "6              1              1                     1  ...             1   \n",
      "7              2              0                     0  ...             2   \n",
      "8              2              0                     0  ...             0   \n",
      "9              0              0                     0  ...             0   \n",
      "10             6              0                     0  ...             2   \n",
      "11             0              0                     0  ...             0   \n",
      "12             2              0                     0  ...             0   \n",
      "13             0              1                     0  ...             5   \n",
      "14             3              0                     0  ...             1   \n",
      "15             0              0                     0  ...             0   \n",
      "\n",
      "    Blocks  Goals conceded Saves made  Saves-to-shots ratio  Fouls Won  \\\n",
      "0       10               3         13                 81.3%         41   \n",
      "1       10               6          9                 60.1%         53   \n",
      "2       10               5         10                 66.7%         25   \n",
      "3       29               3         22                 88.1%         43   \n",
      "4        7               5          6                 54.6%         36   \n",
      "5       11               6         10                 62.6%         63   \n",
      "6       23               7         13                 65.1%         67   \n",
      "7       18               7         20                 74.1%        101   \n",
      "8        9               5         12                 70.6%         35   \n",
      "9        8               3          6                 66.7%         48   \n",
      "10      11               4         10                 71.5%         73   \n",
      "11      23               9         17                 65.4%         43   \n",
      "12       8               3         10                 77.0%         34   \n",
      "13       8               1         15                 93.8%        102   \n",
      "14      12               5          8                 61.6%         35   \n",
      "15       4               4         13                 76.5%         48   \n",
      "\n",
      "    Fouls Conceded  Offsides  Yellow Cards  Red Cards  \n",
      "0               62         2             9          0  \n",
      "1               73         8             7          0  \n",
      "2               38         8             4          0  \n",
      "3               45         6             5          0  \n",
      "4               51         5             6          0  \n",
      "5               49        12             4          0  \n",
      "6               48        12             9          1  \n",
      "7               89        16            16          0  \n",
      "8               30         3             5          0  \n",
      "9               56         3             7          1  \n",
      "10              90        10            12          0  \n",
      "11              51        11             6          1  \n",
      "12              43         4             6          0  \n",
      "13              83        19            11          0  \n",
      "14              51         7             7          0  \n",
      "15              31         4             5          0  \n",
      "\n",
      "[16 rows x 32 columns]\n"
     ]
    }
   ],
   "source": [
    "# Selecting all columns except the last three\n",
    "all_except_last_3_columns = euro12.iloc[:, :-3]\n",
    "\n",
    "# Displaying the selected columns\n",
    "print(all_except_last_3_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2728e211",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Team Shooting Accuracy\n",
      "3   England             50.0%\n",
      "7     Italy             43.0%\n",
      "12   Russia             22.5%\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Selecting rows for England, Italy, and Russia and their 'Shooting Accuracy'\n",
    "selected_teams = euro12[euro12['Team'].isin(['England', 'Italy', 'Russia'])]\n",
    "\n",
    "# Displaying 'Shooting Accuracy' for the selected teams\n",
    "shooting_accuracy_selected_teams = selected_teams[['Team', 'Shooting Accuracy']]\n",
    "print(shooting_accuracy_selected_teams)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93ddccfc",
   "metadata": {},
   "source": [
    "#Question3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6880d733",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "014a6a59",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generating three Series of length 100 with specified ranges\n",
    "series_1 = pd.Series(np.random.randint(1, 5, size=100))  # Random number from 1 to 4\n",
    "series_2 = pd.Series(np.random.randint(1, 4, size=100))  # Random number from 1 to 3\n",
    "series_3 = pd.Series(np.random.randint(10000, 30001, size=100))  # Random number from 10,000 to 30,000\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "74d27424",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a DataFrame by joining the Series by column\n",
    "data = {\n",
    "    'bedrs': series_1,\n",
    "    'bathrs': series_2,\n",
    "    'price_sqr_meter': series_3\n",
    "}\n",
    "df = pd.DataFrame(data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ebb091a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Renaming the columns in the DataFrame\n",
    "df = df.rename(columns={'0': 'bedrs', '1': 'bathrs', '2': 'price_sqr_meter'})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e85e0152",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Concatenating the three Series into a single column DataFrame\n",
    "bigcolumn = pd.concat([series_1, series_2, series_3], axis=0)\n",
    "bigcolumn = bigcolumn.to_frame()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c906068c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "99\n"
     ]
    }
   ],
   "source": [
    "print(bigcolumn.index.max())  # This will output the maximum index value\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "59489c49",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reindexing the DataFrame to go from 0 to 299\n",
    "bigcolumn.reset_index(drop=True, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "38f5e37d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "299\n"
     ]
    }
   ],
   "source": [
    "print(bigcolumn.index.max())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0695bd9f",
   "metadata": {},
   "source": [
    "#Question4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "70864b50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Yr_Mo_Dy    RPT    VAL    ROS    KIL    SHA   BIR    DUB    CLA    MUL  \\\n",
      "0 2061-01-01  15.04  14.96  13.17   9.29    NaN  9.87  13.67  10.25  10.83   \n",
      "1 2061-01-02  14.71    NaN  10.83   6.50  12.62  7.67  11.50  10.04   9.79   \n",
      "2 2061-01-03  18.50  16.88  12.33  10.13  11.17  6.17  11.25    NaN   8.50   \n",
      "3 2061-01-04  10.58   6.63  11.75   4.58   4.54  2.88   8.63   1.79   5.83   \n",
      "4 2061-01-05  13.33  13.25  11.42   6.17  10.71  8.21  11.92   6.54  10.92   \n",
      "\n",
      "     CLO    BEL    MAL  \n",
      "0  12.58  18.50  15.04  \n",
      "1   9.67  17.54  13.83  \n",
      "2   7.67  12.75  12.71  \n",
      "3   5.88   5.46  10.88  \n",
      "4  10.34  12.92  11.83  \n"
     ]
    }
   ],
   "source": [
    "# Assuming 'wind.txt' is in the current directory\n",
    "data = pd.read_csv('wind.txt', sep='\\s+', parse_dates=[[0, 1, 2]])\n",
    "print(data.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "cfb84d3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.columns = ['Date', 'RPT', 'VAL', 'ROS', 'KIL', 'SHA', 'BIR', 'DUB', 'CLA', 'MUL', 'CLO', 'BEL', 'MAL']\n",
    "data['Date'] = pd.to_datetime(data['Date'])\n",
    "data.set_index('Date', inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b54d6e4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fix_year(date):\n",
    "    if date.year > 2000:\n",
    "        return date - pd.DateOffset(years=100)\n",
    "    return date\n",
    "\n",
    "# Apply the fix_year function to the index\n",
    "data.index = data.index.map(fix_year)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "fbb555e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.index = pd.to_datetime(data.index)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "4c96a3c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RPT    6\n",
      "VAL    3\n",
      "ROS    2\n",
      "KIL    5\n",
      "SHA    2\n",
      "BIR    0\n",
      "DUB    3\n",
      "CLA    2\n",
      "MUL    3\n",
      "CLO    1\n",
      "BEL    0\n",
      "MAL    4\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "missing_values = data.isnull().sum()\n",
    "print(missing_values)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "611b0206",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78857\n"
     ]
    }
   ],
   "source": [
    "non_missing_values = data.notnull().sum().sum()\n",
    "print(non_missing_values)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "1bb60156",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.227982360836938\n"
     ]
    }
   ],
   "source": [
    "mean_windspeed = data.mean().mean()\n",
    "print(mean_windspeed)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "01c90de9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['count', 'mean', 'std', 'min', '50%', 'max'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Check the columns present in loc_stats DataFrame\n",
    "print(loc_stats.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "3702a84c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                   mean                  min  \\\n",
      "Yr_Mo_Dy  2036-09-02 08:26:52.169151232  1973-01-01 00:00:00   \n",
      "RPT                           12.362987                 0.67   \n",
      "VAL                           10.644314                 0.21   \n",
      "ROS                           11.660526                  1.5   \n",
      "KIL                            6.306468                  0.0   \n",
      "SHA                           10.455834                 0.13   \n",
      "BIR                            7.092254                  0.0   \n",
      "DUB                            9.797343                  0.0   \n",
      "CLA                            8.495053                  0.0   \n",
      "MUL                             8.49359                  0.0   \n",
      "CLO                            8.707332                 0.04   \n",
      "BEL                           13.121007                 0.13   \n",
      "MAL                           15.599079                 0.67   \n",
      "\n",
      "                          max       std  \n",
      "Yr_Mo_Dy  2072-12-31 00:00:00       NaN  \n",
      "RPT                      35.8  5.618413  \n",
      "VAL                     33.37  5.267356  \n",
      "ROS                     33.84   5.00845  \n",
      "KIL                     28.46  3.605811  \n",
      "SHA                     37.54  4.936125  \n",
      "BIR                     26.16  3.968683  \n",
      "DUB                     30.37  4.977555  \n",
      "CLA                     31.08  4.499449  \n",
      "MUL                     25.88  4.166872  \n",
      "CLO                     28.21  4.503954  \n",
      "BEL                     42.38  5.835037  \n",
      "MAL                     42.54  6.699794  \n"
     ]
    }
   ],
   "source": [
    "loc_stats = data.describe(percentiles=[], include='all', datetime_is_numeric=True).T\n",
    "loc_stats.drop(columns=['count', '50%'], inplace=True)\n",
    "print(loc_stats)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "3a96c9db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              first freq       last    max       mean   min       std  \\\n",
      "Yr_Mo_Dy 1973-01-01    1 2072-12-31    NaN        NaN   NaN       NaN   \n",
      "RPT             NaT  NaN        NaT   35.8  12.362987  0.67  5.618413   \n",
      "VAL             NaT  NaN        NaT  33.37  10.644314  0.21  5.267356   \n",
      "ROS             NaT  NaN        NaT  33.84  11.660526   1.5   5.00845   \n",
      "KIL             NaT  NaN        NaT  28.46   6.306468   0.0  3.605811   \n",
      "SHA             NaT  NaN        NaT  37.54  10.455834  0.13  4.936125   \n",
      "BIR             NaT  NaN        NaT  26.16   7.092254   0.0  3.968683   \n",
      "DUB             NaT  NaN        NaT  30.37   9.797343   0.0  4.977555   \n",
      "CLA             NaT  NaN        NaT  31.08   8.495053   0.0  4.499449   \n",
      "MUL             NaT  NaN        NaT  25.88    8.49359   0.0  4.166872   \n",
      "CLO             NaT  NaN        NaT  28.21   8.707332  0.04  4.503954   \n",
      "BEL             NaT  NaN        NaT  42.38  13.121007  0.13  5.835037   \n",
      "MAL             NaT  NaN        NaT  42.54  15.599079  0.67  6.699794   \n",
      "\n",
      "                top unique  \n",
      "Yr_Mo_Dy 2061-01-01   6574  \n",
      "RPT             NaT    NaN  \n",
      "VAL             NaT    NaN  \n",
      "ROS             NaT    NaN  \n",
      "KIL             NaT    NaN  \n",
      "SHA             NaT    NaN  \n",
      "BIR             NaT    NaN  \n",
      "DUB             NaT    NaN  \n",
      "CLA             NaT    NaN  \n",
      "MUL             NaT    NaN  \n",
      "CLO             NaT    NaN  \n",
      "BEL             NaT    NaN  \n",
      "MAL             NaT    NaN  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/4x/0956wwm50_v7zjrytjw7pvth0000gn/T/ipykernel_32180/2224095758.py:1: FutureWarning: Treating datetime data as categorical rather than numeric in `.describe` is deprecated and will be removed in a future version of pandas. Specify `datetime_is_numeric=True` to silence this warning and adopt the future behavior now.\n",
      "  day_stats = data.apply(lambda x: x.describe(percentiles=[], include='all')).T\n"
     ]
    }
   ],
   "source": [
    "day_stats = data.apply(lambda x: x.describe(percentiles=[], include='all')).T\n",
    "day_stats.drop(columns=['count', '50%'], inplace=True)\n",
    "print(day_stats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "1897042b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          max                           mean  \\\n",
      "Yr_Mo_Dy  2072-12-31 00:00:00  2036-09-02 08:26:52.169151232   \n",
      "RPT                      35.8                      12.362987   \n",
      "VAL                     33.37                      10.644314   \n",
      "ROS                     33.84                      11.660526   \n",
      "KIL                     28.46                       6.306468   \n",
      "SHA                     37.54                      10.455834   \n",
      "BIR                     26.16                       7.092254   \n",
      "DUB                     30.37                       9.797343   \n",
      "CLA                     31.08                       8.495053   \n",
      "MUL                     25.88                        8.49359   \n",
      "CLO                     28.21                       8.707332   \n",
      "BEL                     42.38                      13.121007   \n",
      "MAL                     42.54                      15.599079   \n",
      "\n",
      "                          min       std  \n",
      "Yr_Mo_Dy  1973-01-01 00:00:00       NaN  \n",
      "RPT                      0.67  5.618413  \n",
      "VAL                      0.21  5.267356  \n",
      "ROS                       1.5   5.00845  \n",
      "KIL                       0.0  3.605811  \n",
      "SHA                      0.13  4.936125  \n",
      "BIR                       0.0  3.968683  \n",
      "DUB                       0.0  4.977555  \n",
      "CLA                       0.0  4.499449  \n",
      "MUL                       0.0  4.166872  \n",
      "CLO                      0.04  4.503954  \n",
      "BEL                      0.13  5.835037  \n",
      "MAL                      0.67  6.699794  \n"
     ]
    }
   ],
   "source": [
    "day_stats = data.apply(lambda x: x.describe(percentiles=[], include='all', datetime_is_numeric=True)).T\n",
    "day_stats.drop(columns=['count', '50%'], inplace=True)\n",
    "print(day_stats)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "d23fd507",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'RangeIndex' object has no attribute 'month'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[68], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m january_average \u001b[38;5;241m=\u001b[39m data[data\u001b[38;5;241m.\u001b[39mindex\u001b[38;5;241m.\u001b[39mmonth \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m]\u001b[38;5;241m.\u001b[39mgroupby(data\u001b[38;5;241m.\u001b[39mindex\u001b[38;5;241m.\u001b[39myear)\u001b[38;5;241m.\u001b[39mmean()\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'RangeIndex' object has no attribute 'month'"
     ]
    }
   ],
   "source": [
    "january_average = data[data.index.month == 1].groupby(data.index.year).mean()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "9a45ddfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/4x/0956wwm50_v7zjrytjw7pvth0000gn/T/ipykernel_32180/450906216.py:5: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
      "  january_average = data[data.index.month == 1].groupby(data.index.year).mean()\n"
     ]
    }
   ],
   "source": [
    "# Convert index to datetime format\n",
    "data.index = pd.to_datetime(data.index)\n",
    "\n",
    "# Calculate the average windspeed for January for each year\n",
    "january_average = data[data.index.month == 1].groupby(data.index.year).mean()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "771d4b1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatetimeIndex([          '1970-01-01 00:00:00',\n",
      "               '1970-01-01 00:00:00.000000001',\n",
      "               '1970-01-01 00:00:00.000000002',\n",
      "               '1970-01-01 00:00:00.000000003',\n",
      "               '1970-01-01 00:00:00.000000004',\n",
      "               '1970-01-01 00:00:00.000000005',\n",
      "               '1970-01-01 00:00:00.000000006',\n",
      "               '1970-01-01 00:00:00.000000007',\n",
      "               '1970-01-01 00:00:00.000000008',\n",
      "               '1970-01-01 00:00:00.000000009',\n",
      "               ...\n",
      "               '1970-01-01 00:00:00.000006564',\n",
      "               '1970-01-01 00:00:00.000006565',\n",
      "               '1970-01-01 00:00:00.000006566',\n",
      "               '1970-01-01 00:00:00.000006567',\n",
      "               '1970-01-01 00:00:00.000006568',\n",
      "               '1970-01-01 00:00:00.000006569',\n",
      "               '1970-01-01 00:00:00.000006570',\n",
      "               '1970-01-01 00:00:00.000006571',\n",
      "               '1970-01-01 00:00:00.000006572',\n",
      "               '1970-01-01 00:00:00.000006573'],\n",
      "              dtype='datetime64[ns]', length=6574, freq=None)\n",
      "                                Yr_Mo_Dy    RPT    VAL    ROS    KIL    SHA  \\\n",
      "1970-01-01 00:00:00.000000000 2061-01-01  15.04  14.96  13.17   9.29    NaN   \n",
      "1970-01-01 00:00:00.000000001 2061-01-02  14.71    NaN  10.83   6.50  12.62   \n",
      "1970-01-01 00:00:00.000000002 2061-01-03  18.50  16.88  12.33  10.13  11.17   \n",
      "1970-01-01 00:00:00.000000003 2061-01-04  10.58   6.63  11.75   4.58   4.54   \n",
      "1970-01-01 00:00:00.000000004 2061-01-05  13.33  13.25  11.42   6.17  10.71   \n",
      "\n",
      "                                BIR    DUB    CLA    MUL    CLO    BEL    MAL  \n",
      "1970-01-01 00:00:00.000000000  9.87  13.67  10.25  10.83  12.58  18.50  15.04  \n",
      "1970-01-01 00:00:00.000000001  7.67  11.50  10.04   9.79   9.67  17.54  13.83  \n",
      "1970-01-01 00:00:00.000000002  6.17  11.25    NaN   8.50   7.67  12.75  12.71  \n",
      "1970-01-01 00:00:00.000000003  2.88   8.63   1.79   5.83   5.88   5.46  10.88  \n",
      "1970-01-01 00:00:00.000000004  8.21  11.92   6.54  10.92  10.34  12.92  11.83  \n",
      "                                Yr_Mo_Dy    RPT    VAL    ROS    KIL    SHA  \\\n",
      "1970-01-01 00:00:00.000000000 2061-01-01  15.04  14.96  13.17   9.29    NaN   \n",
      "1970-01-01 00:00:00.000000001 2061-01-02  14.71    NaN  10.83   6.50  12.62   \n",
      "1970-01-01 00:00:00.000000002 2061-01-03  18.50  16.88  12.33  10.13  11.17   \n",
      "1970-01-01 00:00:00.000000003 2061-01-04  10.58   6.63  11.75   4.58   4.54   \n",
      "1970-01-01 00:00:00.000000004 2061-01-05  13.33  13.25  11.42   6.17  10.71   \n",
      "\n",
      "                                BIR    DUB    CLA    MUL    CLO    BEL    MAL  \n",
      "1970-01-01 00:00:00.000000000  9.87  13.67  10.25  10.83  12.58  18.50  15.04  \n",
      "1970-01-01 00:00:00.000000001  7.67  11.50  10.04   9.79   9.67  17.54  13.83  \n",
      "1970-01-01 00:00:00.000000002  6.17  11.25    NaN   8.50   7.67  12.75  12.71  \n",
      "1970-01-01 00:00:00.000000003  2.88   8.63   1.79   5.83   5.88   5.46  10.88  \n",
      "1970-01-01 00:00:00.000000004  8.21  11.92   6.54  10.92  10.34  12.92  11.83  \n",
      "            RPT        VAL        ROS       KIL        SHA       BIR  \\\n",
      "1970  12.362987  10.644314  11.660526  6.306468  10.455834  7.092254   \n",
      "\n",
      "           DUB       CLA      MUL       CLO        BEL        MAL  \n",
      "1970  9.797343  8.495053  8.49359  8.707332  13.121007  15.599079  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/4x/0956wwm50_v7zjrytjw7pvth0000gn/T/ipykernel_32180/2135229709.py:12: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
      "  january_average = january_data.groupby(january_data.index.year).mean()\n"
     ]
    }
   ],
   "source": [
    "# Check the Index Type\n",
    "print(data.index)\n",
    "\n",
    "# Review Data Structure\n",
    "print(data.head())\n",
    "\n",
    "# Filter for January\n",
    "january_data = data[data.index.month == 1]\n",
    "print(january_data.head())\n",
    "\n",
    "# Group by Year and Calculate Mean\n",
    "january_average = january_data.groupby(january_data.index.year).mean()\n",
    "print(january_average)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "05fc230a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Group by Year and Calculate Mean, specifying numeric_only=True\n",
    "january_average = january_data.groupby(january_data.index.year).mean(numeric_only=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "464c3761",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            RPT        VAL        ROS       KIL        SHA       BIR  \\\n",
      "1970  12.362987  10.644314  11.660526  6.306468  10.455834  7.092254   \n",
      "\n",
      "           DUB       CLA      MUL       CLO        BEL        MAL  \n",
      "1970  9.797343  8.495053  8.49359  8.707332  13.121007  15.599079  \n"
     ]
    }
   ],
   "source": [
    "print(january_average)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "648d547c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RPT</th>\n",
       "      <th>VAL</th>\n",
       "      <th>ROS</th>\n",
       "      <th>KIL</th>\n",
       "      <th>SHA</th>\n",
       "      <th>BIR</th>\n",
       "      <th>DUB</th>\n",
       "      <th>CLA</th>\n",
       "      <th>MUL</th>\n",
       "      <th>CLO</th>\n",
       "      <th>BEL</th>\n",
       "      <th>MAL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1970-01-04</th>\n",
       "      <td>12.362987</td>\n",
       "      <td>10.644314</td>\n",
       "      <td>11.660526</td>\n",
       "      <td>6.306468</td>\n",
       "      <td>10.455834</td>\n",
       "      <td>7.092254</td>\n",
       "      <td>9.797343</td>\n",
       "      <td>8.495053</td>\n",
       "      <td>8.49359</td>\n",
       "      <td>8.707332</td>\n",
       "      <td>13.121007</td>\n",
       "      <td>15.599079</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  RPT        VAL        ROS       KIL        SHA       BIR  \\\n",
       "1970-01-04  12.362987  10.644314  11.660526  6.306468  10.455834  7.092254   \n",
       "\n",
       "                 DUB       CLA      MUL       CLO        BEL        MAL  \n",
       "1970-01-04  9.797343  8.495053  8.49359  8.707332  13.121007  15.599079  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Downsample to yearly frequency for each location\n",
    "data.resample('Y').mean(numeric_only=True)\n",
    "\n",
    "# Downsample to monthly frequency for each location\n",
    "data.resample('M').mean(numeric_only=True)\n",
    "\n",
    "# Downsample to weekly frequency for each location\n",
    "data.resample('W').mean(numeric_only=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "92320041",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             RPT                              VAL                              \\\n",
      "             min   max       mean       std   min    max       mean       std   \n",
      "1970-01-04  0.67  35.8  12.362987  5.618413  0.21  33.37  10.644314  5.267356   \n",
      "\n",
      "            ROS         ...       CLO             BEL                    \\\n",
      "            min    max  ...      mean       std   min    max       mean   \n",
      "1970-01-04  1.5  33.84  ...  8.707332  4.503954  0.13  42.38  13.121007   \n",
      "\n",
      "                       MAL                              \n",
      "                 std   min    max       mean       std  \n",
      "1970-01-04  5.835037  0.67  42.54  15.599079  6.699794  \n",
      "\n",
      "[1 rows x 48 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/4x/0956wwm50_v7zjrytjw7pvth0000gn/T/ipykernel_32180/878268839.py:1: FutureWarning: ['Yr_Mo_Dy'] did not aggregate successfully. If any error is raised this will raise in a future version of pandas. Drop these columns/ops to avoid this warning.\n",
      "  weekly_stats = data.resample('W').agg(['min', 'max', 'mean', 'std'])\n"
     ]
    }
   ],
   "source": [
    "weekly_stats = data.resample('W').agg(['min', 'max', 'mean', 'std'])\n",
    "weekly_stats = weekly_stats.iloc[:52]\n",
    "print(weekly_stats)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f240523",
   "metadata": {},
   "source": [
    "#Question5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "b488aa46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   order_id  quantity                              item_name  \\\n",
      "0         1         1           Chips and Fresh Tomato Salsa   \n",
      "1         1         1                                   Izze   \n",
      "2         1         1                       Nantucket Nectar   \n",
      "3         1         1  Chips and Tomatillo-Green Chili Salsa   \n",
      "4         2         2                           Chicken Bowl   \n",
      "5         3         1                           Chicken Bowl   \n",
      "6         3         1                          Side of Chips   \n",
      "7         4         1                          Steak Burrito   \n",
      "8         4         1                       Steak Soft Tacos   \n",
      "9         5         1                          Steak Burrito   \n",
      "\n",
      "                                  choice_description item_price  \n",
      "0                                                NaN     $2.39   \n",
      "1                                       [Clementine]     $3.39   \n",
      "2                                            [Apple]     $3.39   \n",
      "3                                                NaN     $2.39   \n",
      "4  [Tomatillo-Red Chili Salsa (Hot), [Black Beans...    $16.98   \n",
      "5  [Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...    $10.98   \n",
      "6                                                NaN     $1.69   \n",
      "7  [Tomatillo Red Chili Salsa, [Fajita Vegetables...    $11.75   \n",
      "8  [Tomatillo Green Chili Salsa, [Pinto Beans, Ch...     $9.25   \n",
      "9  [Fresh Tomato Salsa, [Rice, Black Beans, Pinto...     $9.25   \n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Step 2 & 3: Importing the dataset and assigning it to a variable 'chipo'\n",
    "url = \"https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv\"\n",
    "chipo = pd.read_csv(url, delimiter='\\t')\n",
    "\n",
    "# Step 4: Viewing the first 10 entries\n",
    "print(chipo.head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "1cdf02a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of observations in the dataset: 4622\n"
     ]
    }
   ],
   "source": [
    "# Finding the number of observations (rows) in the dataset\n",
    "num_observations = chipo.shape[0]\n",
    "print(\"Number of observations in the dataset:\", num_observations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "175b6c2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of columns in the dataset: 5\n"
     ]
    }
   ],
   "source": [
    "# Finding the number of columns in the dataset\n",
    "num_columns = chipo.shape[1]\n",
    "print(\"Number of columns in the dataset:\", num_columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "bd368368",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column names:\n",
      "order_id\n",
      "quantity\n",
      "item_name\n",
      "choice_description\n",
      "item_price\n"
     ]
    }
   ],
   "source": [
    "# Print the names of all columns in the dataset\n",
    "print(\"Column names:\")\n",
    "for column_name in chipo.columns:\n",
    "    print(column_name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "0c47c718",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type of index in the dataset: <class 'pandas.core.indexes.range.RangeIndex'>\n"
     ]
    }
   ],
   "source": [
    "# Check the type of index used in the dataset\n",
    "index_type = chipo.index\n",
    "print(\"Type of index in the dataset:\", type(index_type))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "ea61d712",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The most-ordered item is: Chicken Bowl\n"
     ]
    }
   ],
   "source": [
    "# Grouping the dataset by item name and calculating the total quantity ordered for each item\n",
    "item_quantity = chipo.groupby('item_name')['quantity'].sum()\n",
    "\n",
    "# Finding the item with the highest total quantity ordered\n",
    "most_ordered_item = item_quantity.idxmax()  # Retrieve the index of the maximum value\n",
    "\n",
    "print(\"The most-ordered item is:\", most_ordered_item)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "1bb65e27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of 'Chicken Bowl' items ordered: 761\n"
     ]
    }
   ],
   "source": [
    "# Grouping the dataset by item name and calculating the total quantity ordered for each item\n",
    "item_quantity = chipo.groupby('item_name')['quantity'].sum()\n",
    "\n",
    "# Finding the most-ordered item\n",
    "most_ordered_item = item_quantity.idxmax()  # Retrieve the index of the maximum value\n",
    "\n",
    "# Filtering the dataset to get entries for the most-ordered item and calculating total quantity ordered\n",
    "quantity_ordered = chipo[chipo['item_name'] == most_ordered_item]['quantity'].sum()\n",
    "\n",
    "print(f\"The number of '{most_ordered_item}' items ordered: {quantity_ordered}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "d46e533a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The most-ordered item in the choice_description column is: [Diet Coke]\n"
     ]
    }
   ],
   "source": [
    "# Grouping the dataset by choice description and calculating the total quantity ordered for each description\n",
    "choice_description_quantity = chipo.groupby('choice_description')['quantity'].sum()\n",
    "\n",
    "# Finding the item with the highest total quantity ordered in choice_description\n",
    "most_ordered_choice_description = choice_description_quantity.idxmax()\n",
    "\n",
    "print(\"The most-ordered item in the choice_description column is:\", most_ordered_choice_description)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "bee098cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of items ordered: 4972\n"
     ]
    }
   ],
   "source": [
    "# Calculating the total number of items ordered\n",
    "total_items_ordered = chipo['quantity'].sum()\n",
    "\n",
    "print(\"Total number of items ordered:\", total_items_ordered)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "4d0da225",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Item price type before conversion: float64\n",
      "Item price type after conversion: float64\n"
     ]
    }
   ],
   "source": [
    "# Step 1: Check the item price type before conversion\n",
    "print(\"Item price type before conversion:\", chipo['item_price'].dtype)\n",
    "\n",
    "# Step 2: Create a lambda function to handle conversion\n",
    "convert_to_float = lambda x: float(x[1:])\n",
    "chipo['item_price'] = chipo['item_price'].apply(convert_to_float) if chipo['item_price'].dtype == 'O' else chipo['item_price']\n",
    "\n",
    "# Step 3: Check the item price type after conversion\n",
    "print(\"Item price type after conversion:\", chipo['item_price'].dtype)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "2d1635f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total revenue for the period in the dataset is: $39237.02\n"
     ]
    }
   ],
   "source": [
    "# Calculate revenue by multiplying quantity and item price, then summing up\n",
    "chipo['revenue'] = chipo['quantity'] * chipo['item_price']\n",
    "total_revenue = chipo['revenue'].sum()\n",
    "\n",
    "print(f\"The total revenue for the period in the dataset is: ${total_revenue:.2f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12775831",
   "metadata": {},
   "source": [
    "#QUESTION6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "3f1d4299",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Year', 'Marriages', 'Divorces', 'Population', 'Marriages_per_1000',\n",
      "       'Divorces_per_1000'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load the data from the CSV file\n",
    "file_path = '/Users/donyabonyadian/Downloads/us-marriages-divorces-1867-2014.csv'  # Replace with your file path\n",
    "data = pd.read_csv(file_path)\n",
    "\n",
    "# Print the column names to verify\n",
    "print(data.columns)\n",
    "\n",
    "# Assuming the column names are different, update the column names accordingly\n",
    "# Replace 'Year', 'Marriages_per_capita', and 'Divorces_per_capita' with your actual column names\n",
    "years = data['Year']\n",
    "marriages_per_capita = data['Marriages']  # Replace with the correct column name for marriages per capita\n",
    "divorces_per_capita = data['Divorces']  # Replace with the correct column name for divorces per capita\n",
    "\n",
    "# Create the line plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(years, marriages_per_capita, label='Marriages per Capita', color='blue')\n",
    "plt.plot(years, divorces_per_capita, label='Divorces per Capita', color='red')\n",
    "\n",
    "# Adding labels and title\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number per Capita')\n",
    "plt.title('Number of Marriages and Divorces per Capita in the U.S. (1867 - 2014)')\n",
    "plt.legend()\n",
    "\n",
    "# Show the plot\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "118d8ec2",
   "metadata": {},
   "source": [
    "#QUESTION7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "7d5b488a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Filter the data for the years 1900, 1950, and 2000\n",
    "selected_years = [1900, 1950, 2000]\n",
    "filtered_data = data[data['Year'].isin(selected_years)]\n",
    "\n",
    "# Extracting data for marriages and divorces per capita for selected years\n",
    "marriages_per_capita = filtered_data[filtered_data['Year'].isin(selected_years)]['Marriages']  # Replace 'Marriages' with the correct column name\n",
    "divorces_per_capita = filtered_data[filtered_data['Year'].isin(selected_years)]['Divorces']  # Replace 'Divorces' with the correct column name\n",
    "\n",
    "# Create the vertical bar chart\n",
    "plt.figure(figsize=(8, 6))\n",
    "\n",
    "# Bar positions\n",
    "bar_width = 0.35\n",
    "bar_positions_marriages = range(len(selected_years))\n",
    "bar_positions_divorces = [pos + bar_width for pos in bar_positions_marriages]\n",
    "\n",
    "# Create bars for marriages and divorces\n",
    "plt.bar(bar_positions_marriages, marriages_per_capita, bar_width, label='Marriages per Capita', color='blue')\n",
    "plt.bar(bar_positions_divorces, divorces_per_capita, bar_width, label='Divorces per Capita', color='red')\n",
    "\n",
    "# Adding labels and title\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('Number per Capita')\n",
    "plt.title('Comparison of Marriages and Divorces per Capita in the U.S. (1900, 1950, 2000)')\n",
    "plt.xticks([pos + bar_width / 2 for pos in bar_positions_marriages], selected_years)\n",
    "plt.legend()\n",
    "\n",
    "# Show the plot\n",
    "plt.grid(axis='y')\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "742928bd",
   "metadata": {},
   "source": [
    "#QUESTION8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "363163ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Load data from the CSV file\n",
    "file_path = '/Users/donyabonyadian/Downloads/actor_kill_counts.csv'  # Replace with your file path\n",
    "data = pd.read_csv(file_path)\n",
    "\n",
    "# Sort the data by Kill_Count in descending order\n",
    "sorted_data = data.sort_values(by='Count', ascending=True)\n",
    "\n",
    "# Create the horizontal bar chart\n",
    "plt.figure(figsize=(10, 8))\n",
    "plt.barh(sorted_data['Actor'], sorted_data['Count'], color='skyblue')\n",
    "\n",
    "# Label each bar with actor names\n",
    "for index, value in enumerate(sorted_data['Count']):\n",
    "    plt.text(value, index, str(value), ha='left', va='center')\n",
    "\n",
    "# Adding labels and title\n",
    "plt.xlabel('Kill Count')\n",
    "plt.ylabel('Actor')\n",
    "plt.title('Deadliest Actors in Hollywood Based on Kill Count')\n",
    "\n",
    "# Show the plot\n",
    "plt.grid(axis='x')\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4e5ec3f",
   "metadata": {},
   "source": [
    "#QUESTION9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "2a2fd668",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Load data from the CSV file\n",
    "file_path = '/Users/donyabonyadian/Downloads/roman-emperor-reigns.csv'  # Replace with your file path\n",
    "data = pd.read_csv(file_path)\n",
    "\n",
    "# Count the number of assassinated and non-assassinated emperors\n",
    "assassinated_count = data[data['Cause_of_Death'] == 'Assassinated'].shape[0]\n",
    "not_assassinated_count = len(data) - assassinated_count\n",
    "\n",
    "# Labels for the pie chart\n",
    "labels = ['Assassinated', 'Not Assassinated']\n",
    "\n",
    "# Data to plot\n",
    "sizes = [assassinated_count, not_assassinated_count]\n",
    "colors = ['red', 'green']\n",
    "explode = (0.1, 0)  # Explode the 'Assassinated' slice to emphasize it slightly\n",
    "\n",
    "# Create the pie chart\n",
    "plt.figure(figsize=(8, 8))\n",
    "plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n",
    "\n",
    "# Equal aspect ratio ensures that pie is drawn as a circle\n",
    "plt.axis('equal')\n",
    "\n",
    "# Title for the pie chart\n",
    "plt.title('Fraction of Roman Emperors Assassinated')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d198e2a",
   "metadata": {},
   "source": [
    "#QUESTION10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "8906cd3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load data from the CSV file\n",
    "file_path = '/Users/donyabonyadian/Downloads/arcade-revenue-vs-cs-doctorates.csv'\n",
    "data = pd.read_csv(file_path)\n",
    "\n",
    "# Filter the data for the years 2000 to 2009\n",
    "filtered_data = data[(data['Year'] >= 2000) & (data['Year'] <= 2009)]\n",
    "\n",
    "# Extract columns for revenue, CS doctorates, and year\n",
    "revenue = filtered_data['Total Arcade Revenue (billions)']\n",
    "cs_doctorates = filtered_data['Computer Science Doctorates Awarded (US)']\n",
    "years = filtered_data['Year']\n",
    "\n",
    "# Create a scatter plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Scatter plot with color-coding for each year\n",
    "scatter = plt.scatter(revenue, cs_doctorates, c=years, cmap='viridis', alpha=0.7)\n",
    "\n",
    "# Adding labels and title\n",
    "plt.xlabel('Total Arcade Revenue (billions)')\n",
    "plt.ylabel('Computer Science Doctorates Awarded (US)')\n",
    "plt.title('Relationship between Arcade Revenue and CS Doctorates (2000-2009)')\n",
    "plt.colorbar(scatter, label='Year')\n",
    "\n",
    "# Show the plot\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5e0c549",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
